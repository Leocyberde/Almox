{"file_contents":{"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask-dance>=7.1.0\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pyjwt>=2.10.1\",\n    \"flask-login>=0.6.3\",\n    \"oauthlib>=3.3.1\",\n    \"sqlalchemy>=2.0.43\",\n    \"flask-wtf>=1.2.2\",\n    \"wtforms>=3.2.1\",\n    \"werkzeug>=3.1.3\",\n    \"flask-mail>=0.10.0\",\n    \"pytz>=2025.2\",\n]\n","size_bytes":517},"src/app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom flask_mail import Mail\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\n# Initialize extensions\ndb = SQLAlchemy(model_class=Base)\nlogin_manager = LoginManager()\nmail = Mail()\n\ndef create_app():\n    app = Flask(__name__)\n    \n    # Configuration\n    app.secret_key = os.environ.get(\"SESSION_SECRET\") or \"dev-secret-key-change-in-production\"\n    \n    # Database configuration - SQLite for local, PostgreSQL for production\n    database_url = os.environ.get(\"DATABASE_URL\")\n    if database_url and database_url.startswith(\"postgres\"):\n        # Production - PostgreSQL\n        app.config[\"SQLALCHEMY_DATABASE_URI\"] = database_url\n        app.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n            \"pool_recycle\": 300,\n            \"pool_pre_ping\": True,\n        }\n    else:\n        # Development - SQLite\n        app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///inventory.db\"\n        app.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n            \"pool_pre_ping\": True,\n        }\n    app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n    \n    # Upload configuration\n    app.config[\"UPLOAD_FOLDER\"] = \"static/uploads\"\n    app.config[\"MAX_CONTENT_LENGTH\"] = 16 * 1024 * 1024  # 16MB max file size\n    \n    # Mail configuration\n    app.config[\"MAIL_SERVER\"] = os.environ.get(\"MAIL_SERVER\", \"smtp.gmail.com\")\n    app.config[\"MAIL_PORT\"] = int(os.environ.get(\"MAIL_PORT\", \"587\"))\n    app.config[\"MAIL_USE_TLS\"] = True\n    app.config[\"MAIL_USERNAME\"] = os.environ.get(\"MAIL_USERNAME\", \"\")\n    app.config[\"MAIL_PASSWORD\"] = os.environ.get(\"MAIL_PASSWORD\", \"\")\n    app.config[\"MAIL_DEFAULT_SENDER\"] = os.environ.get(\"MAIL_DEFAULT_SENDER\", \"noreply@empresa.com\")\n    \n    # Proxy fix for correct URL generation\n    app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n    \n    # Initialize extensions\n    db.init_app(app)\n    login_manager.init_app(app)\n    mail.init_app(app)\n    \n    # Login manager configuration\n    login_manager.login_view = \"login\"\n    login_manager.login_message = \"Por favor, fa√ßa login para acessar esta p√°gina.\"\n    login_manager.login_message_category = \"info\"\n    \n    # Create upload directory with proper permissions\n    upload_dir = app.config[\"UPLOAD_FOLDER\"]\n    os.makedirs(upload_dir, exist_ok=True)\n    \n    # Also create the instance/static/uploads directory if needed\n    instance_upload_dir = os.path.join(app.instance_path, \"static\", \"uploads\")\n    os.makedirs(instance_upload_dir, exist_ok=True)\n    \n    return app\n\n# Create app instance\napp = create_app()\n\n# User loader for Flask-Login\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import User\n    return User.query.get(int(user_id))\n\n# Create tables\nwith app.app_context():\n    import models\n    db.create_all()\n    logging.info(\"Database tables created\")\n","size_bytes":3040},"src/database_manager.py":{"content":"\n#!/usr/bin/env python3\nimport os\nimport sys\nfrom app import app, db\n\ndef show_current_database():\n    \"\"\"Mostra qual banco est√° sendo usado atualmente\"\"\"\n    with app.app_context():\n        engine = db.engine\n        url = str(engine.url)\n        \n        if url.startswith(\"sqlite\"):\n            print(\"üìä Banco atual: SQLite (Desenvolvimento)\")\n            print(f\"   Arquivo: {url.replace('sqlite:///', '')}\")\n        elif url.startswith(\"postgresql\"):\n            print(\"üìä Banco atual: PostgreSQL (Produ√ß√£o)\")\n            print(f\"   URL: {url}\")\n        else:\n            print(f\"üìä Banco atual: {url}\")\n\ndef create_tables():\n    \"\"\"Cria todas as tabelas no banco atual\"\"\"\n    with app.app_context():\n        db.create_all()\n        print(\"‚úÖ Tabelas criadas no banco atual\")\n\ndef show_stats():\n    \"\"\"Mostra estat√≠sticas do banco atual\"\"\"\n    from models import User, Product, Allocation, StockMovement\n    \n    with app.app_context():\n        try:\n            users_count = User.query.count()\n            products_count = Product.query.count()\n            allocations_count = Allocation.query.count()\n            movements_count = StockMovement.query.count()\n            \n            print(\"üìà Estat√≠sticas do banco:\")\n            print(f\"   - Usu√°rios: {users_count}\")\n            print(f\"   - Produtos: {products_count}\")\n            print(f\"   - Aloca√ß√µes: {allocations_count}\")\n            print(f\"   - Movimenta√ß√µes: {movements_count}\")\n            \n        except Exception as e:\n            print(f\"‚ùå Erro ao obter estat√≠sticas: {e}\")\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"üîß Gerenciador de Banco de Dados\")\n        print(\"\\nComandos dispon√≠veis:\")\n        print(\"  status     - Mostra qual banco est√° sendo usado\")\n        print(\"  create     - Cria todas as tabelas\")\n        print(\"  stats      - Mostra estat√≠sticas do banco\")\n        print(\"  migrate-to-sqlite    - Migra PostgreSQL ‚Üí SQLite\")\n        print(\"  migrate-to-postgres  - Migra SQLite ‚Üí PostgreSQL\")\n        print(\"\\nExemplo: python database_manager.py status\")\n        return\n    \n    command = sys.argv[1].lower()\n    \n    if command == \"status\":\n        show_current_database()\n    elif command == \"create\":\n        create_tables()\n    elif command == \"stats\":\n        show_stats()\n    elif command == \"migrate-to-sqlite\":\n        from migrate_to_sqlite import migrate_postgres_to_sqlite\n        migrate_postgres_to_sqlite()\n    elif command == \"migrate-to-postgres\":\n        from migrate_to_postgres import migrate_sqlite_to_postgres\n        migrate_sqlite_to_postgres()\n    else:\n        print(f\"‚ùå Comando desconhecido: {command}\")\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":2707},"src/forms.py":{"content":"from flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileAllowed\nfrom wtforms import StringField, PasswordField, SelectField, IntegerField, TextAreaField, BooleanField, HiddenField\nfrom wtforms.validators import DataRequired, Email, Length, NumberRange, ValidationError, EqualTo\nfrom models import User, Product\n\nclass LoginForm(FlaskForm):\n    username = StringField('Usu√°rio', validators=[DataRequired(), Length(min=3, max=64)])\n    password = PasswordField('Senha', validators=[DataRequired()])\n\nclass ForgotPasswordForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n\nclass ResetPasswordForm(FlaskForm):\n    password = PasswordField('Nova Senha', validators=[DataRequired(), Length(min=6)])\n    password_confirm = PasswordField('Confirmar Senha', validators=[\n        DataRequired(), EqualTo('password', message='Senhas devem ser iguais')\n    ])\n\nclass EmployeeForm(FlaskForm):\n    username = StringField('Nome de Usu√°rio', validators=[DataRequired(), Length(min=3, max=64)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Senha', validators=[DataRequired(), Length(min=6)])\n    role = SelectField('Fun√ß√£o', choices=[\n        ('producao', 'Produ√ß√£o'),\n        ('almoxarifado', 'Almoxarifado')\n    ], validators=[DataRequired()])\n    is_admin = BooleanField('Administrador')\n\nclass EditEmployeeForm(FlaskForm):\n    username = StringField('Nome de Usu√°rio', validators=[DataRequired(), Length(min=3, max=64)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Nova Senha (deixe em branco para manter a atual)', validators=[Length(min=6)])\n    role = SelectField('Fun√ß√£o', choices=[\n        ('producao', 'Produ√ß√£o'),\n        ('almoxarifado', 'Almoxarifado')\n    ], validators=[DataRequired()])\n    is_admin = BooleanField('Administrador')\n    is_active = BooleanField('Ativo')\n\n# SupplierForm removed - using text field instead\n\nclass ProductForm(FlaskForm):\n    code = StringField('C√≥digo', validators=[DataRequired(), Length(max=50)])\n    name = StringField('Nome do Produto', validators=[DataRequired(), Length(max=200)])\n    supplier_reference = StringField('Refer√™ncia do Fornecedor', validators=[Length(max=100)])\n    location = StringField('Local', validators=[DataRequired(), Length(max=100)])\n    quantity = IntegerField('Quantidade', validators=[DataRequired(), NumberRange(min=0)])\n    unit = SelectField('Unidade', choices=[\n        ('unidade', 'Unidade'),\n        ('metros', 'Metros'),\n        ('pacote', 'Pacote'),\n        ('cento', 'Cento')\n    ], validators=[DataRequired()])\n    supplier_name = StringField('Fornecedor', validators=[DataRequired(), Length(max=100)])\n    photo = FileField('Foto do Produto', validators=[\n        FileAllowed(['jpg', 'jpeg', 'png', 'gif'], 'Apenas arquivos de imagem s√£o permitidos!')\n    ])\n\n\n    def validate_code(self, field):\n        # Check if code exists and if it's not the current product being edited\n        existing_product = Product.query.filter_by(code=field.data).first()\n        if existing_product and (not hasattr(self, 'product_id') or existing_product.id != self.product_id):\n            raise ValidationError('Este c√≥digo j√° est√° sendo usado por outro produto.')\n\nclass AllocationForm(FlaskForm):\n    product_search = StringField('Buscar Produto', validators=[DataRequired()])\n    product_id = HiddenField('Product ID', validators=[DataRequired()])\n    work_number = StringField('N√∫mero da Obra', validators=[DataRequired(), Length(max=50)])\n    quantity = IntegerField('Quantidade', validators=[DataRequired(), NumberRange(min=1)])\n    notes = TextAreaField('Observa√ß√µes')\n\nclass StockAdjustmentForm(FlaskForm):\n    adjustment_type = SelectField('Tipo de Ajuste', choices=[\n        ('add', 'Adicionar Estoque'),\n        ('remove', 'Remover Estoque')\n    ], validators=[DataRequired()])\n    quantity = IntegerField('Quantidade', validators=[DataRequired(), NumberRange(min=1)])\n    notes = TextAreaField('Observa√ß√µes', validators=[DataRequired()])\n\nclass ProductionRequestForm(FlaskForm):\n    product_search = StringField('Buscar Produto', validators=[DataRequired()])\n    product_id = HiddenField('Product ID', validators=[DataRequired()])\n    work_number = StringField('N√∫mero da Obra', validators=[DataRequired(), Length(max=50)])\n    quantity = IntegerField('Quantidade', validators=[DataRequired(), NumberRange(min=1)])\n    notes = TextAreaField('Observa√ß√µes/Justificativa')\n\nclass ApprovalForm(FlaskForm):\n    action = SelectField('A√ß√£o', choices=[\n        ('approved', 'Aprovar'),\n        ('rejected', 'Rejeitar')\n    ], validators=[DataRequired()])\n    approval_notes = TextAreaField('Observa√ß√µes da Aprova√ß√£o')","size_bytes":4778},"src/main.py":{"content":"from app import app\nimport routes\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":113},"src/migrate_allocation_status.py":{"content":"\nfrom app import app, db\nfrom sqlalchemy import text\n\ndef migrate_allocation_status():\n    with app.app_context():\n        try:\n            print(\"Iniciando migra√ß√£o da tabela allocations...\")\n            \n            # Verificar se as colunas j√° existem\n            columns_to_add = [\n                ('status', 'VARCHAR(20)', 'pending'),\n                ('approved_by_id', 'INTEGER', None),\n                ('approved_at', 'TIMESTAMP', None),\n                ('approval_notes', 'TEXT', None)\n            ]\n            \n            for column_name, column_type, default_value in columns_to_add:\n                # Verificar se a coluna existe\n                result = db.session.execute(\n                    text(f\"SELECT column_name FROM information_schema.columns WHERE table_name='allocations' AND column_name='{column_name}'\")\n                )\n                \n                if not result.fetchone():\n                    print(f\"Adicionando coluna {column_name}...\")\n                    \n                    # Adicionar a coluna\n                    if column_name == 'approved_by_id':\n                        db.session.execute(\n                            text(f\"ALTER TABLE allocations ADD COLUMN {column_name} {column_type} REFERENCES users(id)\")\n                        )\n                    else:\n                        db.session.execute(\n                            text(f\"ALTER TABLE allocations ADD COLUMN {column_name} {column_type}\")\n                        )\n                    \n                    # Definir valor padr√£o se necess√°rio\n                    if default_value:\n                        db.session.execute(\n                            text(f\"UPDATE allocations SET {column_name} = '{default_value}' WHERE {column_name} IS NULL\")\n                        )\n                        \n                        # Tornar a coluna NOT NULL para status\n                        if column_name == 'status':\n                            db.session.execute(\n                                text(f\"ALTER TABLE allocations ALTER COLUMN {column_name} SET NOT NULL\")\n                            )\n                    \n                    print(f\"Coluna {column_name} adicionada com sucesso!\")\n                else:\n                    print(f\"Coluna {column_name} j√° existe.\")\n            \n            # Para allocations existentes, marcar como 'approved' se n√£o tiverem status\n            db.session.execute(\n                text(\"UPDATE allocations SET status = 'approved' WHERE status IS NULL\")\n            )\n            \n            db.session.commit()\n            print(\"Migra√ß√£o conclu√≠da com sucesso!\")\n            \n        except Exception as e:\n            print(f\"Erro durante a migra√ß√£o: {e}\")\n            db.session.rollback()\n            raise e\n\nif __name__ == \"__main__\":\n    migrate_allocation_status()\n","size_bytes":2844},"src/migrate_db.py":{"content":"\nfrom app import app, db\nfrom models import Product\nfrom sqlalchemy import text\n\ndef migrate_database():\n    with app.app_context():\n        try:\n            # Verificar se a coluna supplier_id ainda existe\n            result = db.session.execute(\n                text(\"SELECT column_name FROM information_schema.columns WHERE table_name='products' AND column_name='supplier_id'\")\n            )\n            \n            if result.fetchone():\n                print(\"Removendo coluna supplier_id obsoleta...\")\n                \n                # Remover a constraint de foreign key primeiro (se existir)\n                try:\n                    db.session.execute(\n                        text(\"ALTER TABLE products DROP CONSTRAINT IF EXISTS products_supplier_id_fkey\")\n                    )\n                except:\n                    pass\n                \n                # Remover a coluna supplier_id\n                db.session.execute(\n                    text(\"ALTER TABLE products DROP COLUMN IF EXISTS supplier_id\")\n                )\n                \n                print(\"Coluna supplier_id removida com sucesso!\")\n            \n            # Verificar se a coluna supplier_name existe\n            result = db.session.execute(\n                text(\"SELECT column_name FROM information_schema.columns WHERE table_name='products' AND column_name='supplier_name'\")\n            )\n            \n            if not result.fetchone():\n                print(\"Adicionando coluna supplier_name...\")\n                \n                # Adicionar a coluna supplier_name\n                db.session.execute(\n                    text(\"ALTER TABLE products ADD COLUMN supplier_name VARCHAR(100)\")\n                )\n                \n                # Definir um valor padr√£o para registros existentes\n                db.session.execute(\n                    text(\"UPDATE products SET supplier_name = 'Fornecedor n√£o informado' WHERE supplier_name IS NULL\")\n                )\n                \n                # Tornar a coluna NOT NULL\n                db.session.execute(\n                    text(\"ALTER TABLE products ALTER COLUMN supplier_name SET NOT NULL\")\n                )\n                \n                print(\"Coluna supplier_name adicionada com sucesso!\")\n            else:\n                print(\"Coluna supplier_name j√° existe.\")\n            \n            db.session.commit()\n            print(\"Migra√ß√£o conclu√≠da com sucesso!\")\n                \n        except Exception as e:\n            print(f\"Erro durante a migra√ß√£o: {e}\")\n            db.session.rollback()\n            raise e\n\nif __name__ == \"__main__\":\n    migrate_database()\n","size_bytes":2636},"src/migrate_to_postgres.py":{"content":"\nimport os\nfrom app import app, db\nfrom models import User, Product, Allocation, StockMovement\nfrom sqlalchemy import create_engine, text\n\ndef migrate_sqlite_to_postgres():\n    \"\"\"Migra dados do SQLite para PostgreSQL\"\"\"\n    \n    postgres_url = os.environ.get(\"DATABASE_URL\")\n    if not postgres_url or not postgres_url.startswith(\"postgres\"):\n        print(\"‚ùå Vari√°vel DATABASE_URL do PostgreSQL n√£o encontrada!\")\n        return\n    \n    if not os.path.exists(\"inventory.db\"):\n        print(\"‚ùå Banco SQLite n√£o encontrado!\")\n        return\n    \n    print(\"üîÑ Iniciando migra√ß√£o do SQLite para PostgreSQL...\")\n    \n    try:\n        # Temporariamente usar SQLite\n        temp_app = app\n        temp_app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///inventory.db\"\n        \n        with temp_app.app_context():\n            # Ler dados do SQLite\n            users = User.query.all()\n            products = Product.query.all()\n            allocations = Allocation.query.all()\n            movements = StockMovement.query.all()\n            \n            print(f\"üìä Dados encontrados no SQLite:\")\n            print(f\"   - {len(users)} usu√°rios\")\n            print(f\"   - {len(products)} produtos\")\n            print(f\"   - {len(allocations)} aloca√ß√µes\")\n            print(f\"   - {len(movements)} movimenta√ß√µes\")\n        \n        # Conectar ao PostgreSQL\n        postgres_engine = create_engine(postgres_url)\n        temp_app.config[\"SQLALCHEMY_DATABASE_URI\"] = postgres_url\n        \n        with temp_app.app_context():\n            # Recriar tabelas no PostgreSQL\n            db.create_all()\n            print(\"‚úÖ Tabelas PostgreSQL criadas/atualizadas\")\n            \n            # Migrar dados\n            for user in users:\n                db.session.merge(user)\n            db.session.commit()\n            print(f\"‚úÖ {len(users)} usu√°rios migrados\")\n            \n            for product in products:\n                db.session.merge(product)\n            db.session.commit()\n            print(f\"‚úÖ {len(products)} produtos migrados\")\n            \n            for allocation in allocations:\n                db.session.merge(allocation)\n            db.session.commit()\n            print(f\"‚úÖ {len(allocations)} aloca√ß√µes migradas\")\n            \n            for movement in movements:\n                db.session.merge(movement)\n            db.session.commit()\n            print(f\"‚úÖ {len(movements)} movimenta√ß√µes migradas\")\n            \n            print(\"üéâ Migra√ß√£o para PostgreSQL conclu√≠da!\")\n            \n    except Exception as e:\n        print(f\"‚ùå Erro durante a migra√ß√£o: {e}\")\n        raise e\n\nif __name__ == \"__main__\":\n    migrate_sqlite_to_postgres()\n","size_bytes":2692},"src/migrate_to_sqlite.py":{"content":"\nimport os\nimport sqlite3\nfrom app import app, db\nfrom models import User, Product, Allocation, StockMovement\nfrom sqlalchemy import create_engine, text\nfrom datetime import datetime\n\ndef migrate_postgres_to_sqlite():\n    \"\"\"Migra dados do PostgreSQL para SQLite\"\"\"\n    \n    # Conectar ao PostgreSQL (produ√ß√£o)\n    postgres_url = os.environ.get(\"DATABASE_URL\")\n    if not postgres_url or not postgres_url.startswith(\"postgres\"):\n        print(\"‚ùå Vari√°vel DATABASE_URL do PostgreSQL n√£o encontrada!\")\n        print(\"Configure a vari√°vel de ambiente DATABASE_URL com a URL do PostgreSQL.\")\n        return\n    \n    print(\"üîÑ Iniciando migra√ß√£o do PostgreSQL para SQLite...\")\n    \n    try:\n        # Engine do PostgreSQL\n        postgres_engine = create_engine(postgres_url)\n        \n        with app.app_context():\n            # Remover o banco SQLite existente\n            if os.path.exists(\"inventory.db\"):\n                os.remove(\"inventory.db\")\n                print(\"üóëÔ∏è  Banco SQLite anterior removido\")\n            \n            # Criar tabelas no SQLite\n            db.create_all()\n            print(\"‚úÖ Tabelas SQLite criadas\")\n            \n            # Migrar usu√°rios\n            with postgres_engine.connect() as pg_conn:\n                users_result = pg_conn.execute(text(\"SELECT * FROM users ORDER BY id\"))\n                users_data = users_result.fetchall()\n                \n                for user_row in users_data:\n                    user = User(\n                        id=user_row.id,\n                        username=user_row.username,\n                        email=user_row.email,\n                        password_hash=user_row.password_hash,\n                        role=user_row.role,\n                        is_admin=user_row.is_admin,\n                        is_active=user_row.is_active,\n                        created_at=user_row.created_at,\n                        created_by=user_row.created_by,\n                        reset_token=user_row.reset_token,\n                        reset_token_expires=user_row.reset_token_expires\n                    )\n                    db.session.merge(user)\n                \n                db.session.commit()\n                print(f\"‚úÖ {len(users_data)} usu√°rios migrados\")\n            \n            # Migrar produtos\n            with postgres_engine.connect() as pg_conn:\n                products_result = pg_conn.execute(text(\"SELECT * FROM products ORDER BY id\"))\n                products_data = products_result.fetchall()\n                \n                for product_row in products_data:\n                    product = Product(\n                        id=product_row.id,\n                        code=product_row.code,\n                        name=product_row.name,\n                        supplier_reference=product_row.supplier_reference,\n                        location=product_row.location,\n                        quantity=product_row.quantity,\n                        unit=product_row.unit,\n                        photo_filename=product_row.photo_filename,\n                        supplier_name=product_row.supplier_name,\n                        created_at=product_row.created_at,\n                        updated_at=product_row.updated_at,\n                        created_by=product_row.created_by\n                    )\n                    db.session.merge(product)\n                \n                db.session.commit()\n                print(f\"‚úÖ {len(products_data)} produtos migrados\")\n            \n            # Migrar aloca√ß√µes\n            with postgres_engine.connect() as pg_conn:\n                allocations_result = pg_conn.execute(text(\"SELECT * FROM allocations ORDER BY id\"))\n                allocations_data = allocations_result.fetchall()\n                \n                for allocation_row in allocations_data:\n                    allocation = Allocation(\n                        id=allocation_row.id,\n                        product_id=allocation_row.product_id,\n                        user_id=allocation_row.user_id,\n                        work_number=allocation_row.work_number,\n                        quantity=allocation_row.quantity,\n                        allocated_at=allocation_row.allocated_at,\n                        notes=allocation_row.notes,\n                        status=allocation_row.status,\n                        approved_by_id=allocation_row.approved_by_id,\n                        approved_at=allocation_row.approved_at,\n                        approval_notes=allocation_row.approval_notes\n                    )\n                    db.session.merge(allocation)\n                \n                db.session.commit()\n                print(f\"‚úÖ {len(allocations_data)} aloca√ß√µes migradas\")\n            \n            # Migrar movimenta√ß√µes de estoque\n            with postgres_engine.connect() as pg_conn:\n                movements_result = pg_conn.execute(text(\"SELECT * FROM stock_movements ORDER BY id\"))\n                movements_data = movements_result.fetchall()\n                \n                for movement_row in movements_data:\n                    movement = StockMovement(\n                        id=movement_row.id,\n                        product_id=movement_row.product_id,\n                        user_id=movement_row.user_id,\n                        movement_type=movement_row.movement_type,\n                        quantity=movement_row.quantity,\n                        previous_quantity=movement_row.previous_quantity,\n                        new_quantity=movement_row.new_quantity,\n                        notes=movement_row.notes,\n                        created_at=movement_row.created_at\n                    )\n                    db.session.merge(movement)\n                \n                db.session.commit()\n                print(f\"‚úÖ {len(movements_data)} movimenta√ß√µes de estoque migradas\")\n            \n            print(\"üéâ Migra√ß√£o conclu√≠da com sucesso!\")\n            print(\"üí° Agora o projeto usar√° SQLite localmente e PostgreSQL em produ√ß√£o.\")\n            \n    except Exception as e:\n        print(f\"‚ùå Erro durante a migra√ß√£o: {e}\")\n        raise e\n\nif __name__ == \"__main__\":\n    migrate_postgres_to_sqlite()\n","size_bytes":6201},"src/models.py":{"content":"from datetime import datetime, timezone, timedelta\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom app import db\n\n# Configurar timezone do Brasil (UTC-3)\n# BRAZIL_TZ = timezone(timedelta(hours=-3)) # This line is replaced by the new function logic\n\ndef brazil_now():\n    \"\"\"Get current time in Brazil timezone\"\"\"\n    from datetime import datetime\n    import pytz\n    utc = pytz.timezone('UTC')\n    brazil_tz = pytz.timezone('America/Sao_Paulo')\n    utc_time = datetime.now(utc)\n    return utc_time.astimezone(brazil_tz).replace(tzinfo=None)\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    role = db.Column(db.String(20), nullable=False, default='producao')  # 'almoxarifado', 'producao'\n    is_admin = db.Column(db.Boolean, default=False)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=brazil_now)\n    created_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)\n    reset_token = db.Column(db.String(120), nullable=True)\n    reset_token_expires = db.Column(db.DateTime, nullable=True)\n\n    # Relationships\n    allocations = db.relationship('Allocation', foreign_keys='Allocation.user_id', backref='user', lazy=True)\n\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n    def __repr__(self):\n        return f'<User {self.username}>'\n\n# Supplier model removed - using text field instead\n\nclass Product(db.Model):\n    __tablename__ = 'products'\n\n    id = db.Column(db.Integer, primary_key=True)\n    code = db.Column(db.String(50), unique=True, nullable=False)\n    name = db.Column(db.String(200), nullable=False)\n    supplier_reference = db.Column(db.String(100), nullable=True)\n    location = db.Column(db.String(100), nullable=False)\n    quantity = db.Column(db.Integer, nullable=False, default=0) # This line is not changed by the provided changes\n    unit = db.Column(db.String(20), nullable=False)  # 'unidade', 'metros', 'pacote', 'cento'\n    photo_filename = db.Column(db.String(255), nullable=True)\n    supplier_name = db.Column(db.String(100), nullable=False)\n    created_at = db.Column(db.DateTime, default=brazil_now)\n    updated_at = db.Column(db.DateTime, default=brazil_now, onupdate=brazil_now)\n    created_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n\n    # Relationships\n    allocations = db.relationship('Allocation', backref='product', lazy=True)\n    stock_movements = db.relationship('StockMovement', backref='product', lazy=True)\n\n    def __repr__(self):\n        return f'<Product {self.code} - {self.name}>'\n\nclass Allocation(db.Model):\n    __tablename__ = 'allocations'\n\n    id = db.Column(db.Integer, primary_key=True)\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    work_number = db.Column(db.String(50), nullable=False)\n    quantity = db.Column(db.Integer, nullable=False)\n    allocated_at = db.Column(db.DateTime, default=brazil_now)\n    notes = db.Column(db.Text, nullable=True)\n\n    # Approval workflow fields\n    status = db.Column(db.String(20), nullable=False, default='pending')  # 'pending', 'approved', 'rejected'\n    approved_by_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)\n    approved_at = db.Column(db.DateTime, nullable=True)\n    approval_notes = db.Column(db.Text, nullable=True)\n\n    # Relationships\n    approved_by = db.relationship('User', foreign_keys=[approved_by_id], backref='approved_allocations')\n\n    def __repr__(self):\n        return f'<Allocation {self.product.code} -> Obra {self.work_number} ({self.status})>'\n\nclass StockMovement(db.Model):\n    __tablename__ = 'stock_movements'\n\n    id = db.Column(db.Integer, primary_key=True)\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    movement_type = db.Column(db.String(20), nullable=False)  # 'add', 'remove', 'allocation'\n    quantity = db.Column(db.Integer, nullable=False)\n    previous_quantity = db.Column(db.Integer, nullable=False)\n    new_quantity = db.Column(db.Integer, nullable=False)\n    notes = db.Column(db.Text, nullable=True)\n    created_at = db.Column(db.DateTime, default=brazil_now)\n\n    # Foreign key to user\n    user = db.relationship('User', backref='stock_movements')\n\n    def __repr__(self):\n        return f'<StockMovement {self.product.code} {self.movement_type} {self.quantity}>'","size_bytes":4990},"src/routes.py":{"content":"import os\nfrom datetime import datetime, timedelta\nfrom flask import render_template, request, redirect, url_for, flash, jsonify, send_from_directory\nfrom models import brazil_now\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.utils import secure_filename\nfrom app import app, db\nfrom models import User, Product, Allocation, StockMovement\nfrom forms import (LoginForm, ForgotPasswordForm, ResetPasswordForm, EmployeeForm, \n                   EditEmployeeForm, ProductForm, AllocationForm, StockAdjustmentForm,\n                   ProductionRequestForm, ApprovalForm)\nfrom utils import save_uploaded_file, delete_uploaded_file, generate_reset_token, send_reset_email, log_stock_movement\n\n# Authentication routes\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        if current_user.role == 'almoxarifado':\n            return redirect(url_for('dashboard_almoxarifado'))\n        else:\n            return redirect(url_for('dashboard_producao'))\n    return redirect(url_for('login'))\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user and user.check_password(form.password.data) and user.is_active:\n            login_user(user)\n            next_page = request.args.get('next')\n            flash(f'Bem-vindo, {user.username}!', 'success')\n            return redirect(next_page) if next_page else redirect(url_for('index'))\n        else:\n            flash('Usu√°rio ou senha inv√°lidos, ou conta desativada.', 'danger')\n    \n    return render_template('login.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Voc√™ foi desconectado com sucesso.', 'info')\n    return redirect(url_for('login'))\n\n@app.route('/forgot_password', methods=['GET', 'POST'])\ndef forgot_password():\n    form = ForgotPasswordForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data).first()\n        if user:\n            token = generate_reset_token()\n            user.reset_token = token\n            user.reset_token_expires = brazil_now() + timedelta(hours=1)\n            db.session.commit()\n            \n            if send_reset_email(user, token):\n                flash('Instru√ß√µes para redefinir sua senha foram enviadas para seu email.', 'info')\n            else:\n                flash('Erro ao enviar email. Tente novamente mais tarde.', 'danger')\n        else:\n            flash('Email n√£o encontrado.', 'danger')\n        \n        return redirect(url_for('login'))\n    \n    return render_template('forgot_password.html', form=form)\n\n@app.route('/reset_password', methods=['GET', 'POST'])\ndef reset_password():\n    token = request.args.get('token')\n    if not token:\n        flash('Token inv√°lido.', 'danger')\n        return redirect(url_for('login'))\n    \n    user = User.query.filter_by(reset_token=token).first()\n    if not user or not user.reset_token_expires or user.reset_token_expires < brazil_now():\n        flash('Token inv√°lido ou expirado.', 'danger')\n        return redirect(url_for('login'))\n    \n    form = ResetPasswordForm()\n    if form.validate_on_submit():\n        user.set_password(form.password.data)\n        user.reset_token = None\n        user.reset_token_expires = None\n        db.session.commit()\n        flash('Sua senha foi redefinida com sucesso.', 'success')\n        return redirect(url_for('login'))\n    \n    return render_template('reset_password.html', form=form)\n\n# Dashboard routes\n@app.route('/dashboard/almoxarifado')\n@login_required\ndef dashboard_almoxarifado():\n    if current_user.role != 'almoxarifado':\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('dashboard_producao'))\n    \n    # Statistics\n    total_products = Product.query.count()\n    total_allocations = Allocation.query.count()\n    low_stock_products = Product.query.filter(Product.quantity <= 10).count()\n    pending_requests = Allocation.query.filter_by(status='pending').count()\n    recent_allocations = Allocation.query.order_by(Allocation.allocated_at.desc()).limit(5).all()\n    \n    return render_template('dashboard_almoxarifado.html', \n                         total_products=total_products,\n                         total_allocations=total_allocations,\n                         low_stock_products=low_stock_products,\n                         pending_requests=pending_requests,\n                         recent_allocations=recent_allocations)\n\n@app.route('/dashboard/producao')\n@login_required\ndef dashboard_producao():\n    # Statistics for production users\n    total_requests = Allocation.query.filter_by(user_id=current_user.id).count()\n    pending_requests = Allocation.query.filter_by(user_id=current_user.id, status='pending').count()\n    approved_requests = Allocation.query.filter_by(user_id=current_user.id, status='approved').count()\n    rejected_requests = Allocation.query.filter_by(user_id=current_user.id, status='rejected').count()\n    recent_user_allocations = Allocation.query.filter_by(user_id=current_user.id).order_by(Allocation.allocated_at.desc()).limit(10).all()\n    \n    return render_template('dashboard_producao.html',\n                         total_requests=total_requests,\n                         pending_requests=pending_requests,\n                         approved_requests=approved_requests,\n                         rejected_requests=rejected_requests,\n                         recent_allocations=recent_user_allocations)\n\n# Product management routes\n@app.route('/products/add', methods=['GET', 'POST'])\n@login_required\ndef add_product():\n    if current_user.role != 'almoxarifado':\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('dashboard_producao'))\n    \n    form = ProductForm()\n    if form.validate_on_submit():\n        try:\n            # Save uploaded photo\n            photo_filename = None\n            if form.photo.data and form.photo.data.filename:\n                photo_filename = save_uploaded_file(form.photo.data)\n                if not photo_filename:\n                    flash('Erro ao salvar a foto. Verifique se o arquivo √© uma imagem v√°lida (JPG, PNG, GIF).', 'danger')\n                    return render_template('add_product.html', form=form)\n            \n            product = Product(\n                code=form.code.data,\n                name=form.name.data,\n                supplier_reference=form.supplier_reference.data,\n                location=form.location.data,\n                quantity=0,  # Start with 0, then add via stock movement\n                unit=form.unit.data,\n                supplier_name=form.supplier_name.data,\n                photo_filename=photo_filename,\n                created_by=current_user.id\n            )\n            \n            db.session.add(product)\n            db.session.commit()\n            \n            # Log initial stock\n            log_stock_movement(product, current_user, 'add', form.quantity.data, 'Produto cadastrado')\n            db.session.commit()\n            \n            flash('Produto adicionado com sucesso!', 'success')\n            return redirect(url_for('manage_products'))\n            \n        except Exception as e:\n            db.session.rollback()\n            print(f\"Erro ao adicionar produto: {e}\")\n            flash('Erro interno do servidor. Tente novamente.', 'danger')\n            return render_template('add_product.html', form=form)\n    \n    return render_template('add_product.html', form=form)\n\n@app.route('/products/manage')\n@login_required\ndef manage_products():\n    if current_user.role != 'almoxarifado':\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('dashboard_producao'))\n    \n    page = request.args.get('page', 1, type=int)\n    search = request.args.get('search', '', type=str)\n    \n    query = Product.query\n    if search:\n        query = query.filter(\n            Product.name.contains(search) | \n            Product.code.contains(search) |\n            Product.supplier_reference.contains(search)\n        )\n    \n    products = query.paginate(\n        page=page, per_page=20, error_out=False\n    )\n    \n    # Create form for CSRF token in stock adjustment modals\n    form = StockAdjustmentForm()\n    \n    return render_template('manage_products.html', products=products, search=search, form=form)\n\n@app.route('/products/<int:product_id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_product(product_id):\n    if current_user.role != 'almoxarifado':\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('dashboard_producao'))\n    \n    product = Product.query.get_or_404(product_id)\n    form = ProductForm(obj=product)\n    form.product_id = product.id  # For validation\n    \n    if form.validate_on_submit():\n        # Handle photo update\n        if form.photo.data:\n            # Delete old photo\n            if product.photo_filename:\n                delete_uploaded_file(product.photo_filename)\n            # Save new photo\n            product.photo_filename = save_uploaded_file(form.photo.data)\n        \n        product.code = form.code.data\n        product.name = form.name.data\n        product.supplier_reference = form.supplier_reference.data\n        product.location = form.location.data\n        product.unit = form.unit.data\n        product.supplier_name = form.supplier_name.data\n        product.updated_at = brazil_now()\n        \n        db.session.commit()\n        flash('Produto atualizado com sucesso!', 'success')\n        return redirect(url_for('manage_products'))\n    \n    return render_template('edit_product.html', form=form, product=product)\n\n@app.route('/products/<int:product_id>/delete', methods=['POST'])\n@login_required\ndef delete_product(product_id):\n    if current_user.role != 'almoxarifado' or not current_user.is_admin:\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('manage_products'))\n    \n    product = Product.query.get_or_404(product_id)\n    \n    # Check if product has allocations\n    if product.allocations:\n        flash('N√£o √© poss√≠vel excluir produto com aloca√ß√µes associadas.', 'danger')\n        return redirect(url_for('manage_products'))\n    \n    # Delete photo file\n    if product.photo_filename:\n        delete_uploaded_file(product.photo_filename)\n    \n    db.session.delete(product)\n    db.session.commit()\n    \n    flash('Produto exclu√≠do com sucesso!', 'success')\n    return redirect(url_for('manage_products'))\n\n@app.route('/products/<int:product_id>/adjust_stock', methods=['POST'])\n@login_required\ndef adjust_stock(product_id):\n    if current_user.role != 'almoxarifado':\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('manage_products'))\n    \n    product = Product.query.get_or_404(product_id)\n    form = StockAdjustmentForm()\n    \n    if form.validate_on_submit():\n        log_stock_movement(\n            product, \n            current_user, \n            form.adjustment_type.data, \n            form.quantity.data, \n            form.notes.data or \"\"\n        )\n        db.session.commit()\n        \n        flash('Estoque ajustado com sucesso!', 'success')\n    else:\n        for field, errors in form.errors.items():\n            for error in errors:\n                flash(f'{field}: {error}', 'danger')\n    \n    return redirect(url_for('manage_products'))\n\n# Employee management routes\n@app.route('/employees/manage')\n@login_required\ndef manage_employees():\n    if current_user.role != 'almoxarifado' or not current_user.is_admin:\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('index'))\n    \n    employees = User.query.all()\n    return render_template('manage_employees.html', employees=employees)\n\n@app.route('/employees/add', methods=['GET', 'POST'])\n@login_required\ndef add_employee():\n    if current_user.role != 'almoxarifado' or not current_user.is_admin:\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('index'))\n    \n    form = EmployeeForm()\n    if form.validate_on_submit():\n        # Check if username or email already exists\n        if User.query.filter_by(username=form.username.data).first():\n            flash('Nome de usu√°rio j√° existe.', 'danger')\n            return render_template('add_employee.html', form=form)\n        \n        if User.query.filter_by(email=form.email.data).first():\n            flash('Email j√° cadastrado.', 'danger')\n            return render_template('add_employee.html', form=form)\n        \n        user = User(\n            username=form.username.data,\n            email=form.email.data,\n            role=form.role.data,\n            is_admin=form.is_admin.data,\n            created_by=current_user.id\n        )\n        user.set_password(form.password.data)\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        flash('Funcion√°rio adicionado com sucesso!', 'success')\n        return redirect(url_for('manage_employees'))\n    \n    return render_template('add_employee.html', form=form)\n\n@app.route('/employees/<int:user_id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_employee(user_id):\n    if current_user.role != 'almoxarifado' or not current_user.is_admin:\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('index'))\n    \n    user = User.query.get_or_404(user_id)\n    form = EditEmployeeForm(obj=user)\n    \n    if form.validate_on_submit():\n        # Check if username or email already exists (excluding current user)\n        existing_user = User.query.filter_by(username=form.username.data).first()\n        if existing_user and existing_user.id != user.id:\n            flash('Nome de usu√°rio j√° existe.', 'danger')\n            return render_template('edit_employee.html', form=form, user=user)\n        \n        existing_email = User.query.filter_by(email=form.email.data).first()\n        if existing_email and existing_email.id != user.id:\n            flash('Email j√° cadastrado.', 'danger')\n            return render_template('edit_employee.html', form=form, user=user)\n        \n        user.username = form.username.data\n        user.email = form.email.data\n        user.role = form.role.data\n        user.is_admin = form.is_admin.data\n        user.is_active = form.is_active.data\n        \n        if form.password.data:\n            user.set_password(form.password.data)\n        \n        db.session.commit()\n        flash('Funcion√°rio atualizado com sucesso!', 'success')\n        return redirect(url_for('manage_employees'))\n    \n    return render_template('edit_employee.html', form=form, user=user)\n\n@app.route('/employees/<int:user_id>/delete', methods=['POST'])\n@login_required\ndef delete_employee(user_id):\n    if current_user.role != 'almoxarifado' or not current_user.is_admin:\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('manage_employees'))\n    \n    if user_id == current_user.id:\n        flash('Voc√™ n√£o pode excluir sua pr√≥pria conta.', 'danger')\n        return redirect(url_for('manage_employees'))\n    \n    user = User.query.get_or_404(user_id)\n    \n    # Check if user has allocations\n    if user.allocations:\n        flash('N√£o √© poss√≠vel excluir usu√°rio com aloca√ß√µes associadas.', 'danger')\n        return redirect(url_for('manage_employees'))\n    \n    db.session.delete(user)\n    db.session.commit()\n    \n    flash('Funcion√°rio exclu√≠do com sucesso!', 'success')\n    return redirect(url_for('manage_employees'))\n\n# Allocation routes\n@app.route('/allocate', methods=['GET', 'POST'])\n@login_required\ndef allocate_product():\n    # Use different forms for different roles\n    if current_user.role == 'producao':\n        return redirect(url_for('request_product'))\n    \n    form = AllocationForm()\n    \n    # Pre-select product if product_id is provided in URL\n    product_id = request.args.get('product_id', type=int)\n    selected_product = None\n    if product_id:\n        selected_product = Product.query.get(product_id)\n        if selected_product:\n            form.product_search.data = f\"{selected_product.code} - {selected_product.name}\"\n            form.product_id.data = str(selected_product.id)\n    \n    if form.validate_on_submit():\n        product = Product.query.get_or_404(form.product_id.data)\n        \n        if product.quantity < form.quantity.data:\n            flash('Quantidade insuficiente em estoque.', 'danger')\n            return render_template('allocate_product.html', form=form, selected_product=selected_product)\n        \n        allocation = Allocation(\n            product_id=product.id,\n            user_id=current_user.id,\n            work_number=form.work_number.data,\n            quantity=form.quantity.data,\n            notes=form.notes.data,\n            status='approved',  # Direct allocation for warehouse staff\n            approved_by_id=current_user.id,\n            approved_at=brazil_now()\n        )\n        \n        db.session.add(allocation)\n        \n        # Update stock\n        log_stock_movement(\n            product, \n            current_user, \n            'allocation', \n            form.quantity.data, \n            f'Alocado para obra {form.work_number.data}'\n        )\n        \n        db.session.commit()\n        \n        flash('Produto alocado com sucesso!', 'success')\n        return redirect(url_for('allocation_history'))\n    \n    return render_template('allocate_product.html', form=form, selected_product=selected_product)\n\n# New route for production users to request allocations\n@app.route('/request', methods=['GET', 'POST'])\n@login_required\ndef request_product():\n    if current_user.role != 'producao':\n        flash('Acesso negado. Esta p√°gina √© apenas para usu√°rios de produ√ß√£o.', 'danger')\n        return redirect(url_for('index'))\n    \n    form = ProductionRequestForm()\n    \n    # Pre-select product if product_id is provided in URL\n    product_id = request.args.get('product_id', type=int)\n    selected_product = None\n    if product_id:\n        selected_product = Product.query.get(product_id)\n        if selected_product:\n            form.product_search.data = f\"{selected_product.code} - {selected_product.name}\"\n            form.product_id.data = str(selected_product.id)\n    \n    if form.validate_on_submit():\n        product = Product.query.get_or_404(form.product_id.data)\n        \n        if product.quantity < form.quantity.data:\n            flash('Quantidade insuficiente em estoque. Sua solicita√ß√£o ser√° enviada mesmo assim.', 'warning')\n        \n        # Create pending allocation request\n        allocation = Allocation(\n            product_id=product.id,\n            user_id=current_user.id,\n            work_number=form.work_number.data,\n            quantity=form.quantity.data,\n            notes=form.notes.data,\n            status='pending'  # Pending approval\n        )\n        \n        db.session.add(allocation)\n        db.session.commit()\n        \n        flash('Solicita√ß√£o enviada com sucesso! Aguarde aprova√ß√£o do almoxarifado.', 'success')\n        return redirect(url_for('my_requests'))\n    \n    return render_template('request_product.html', form=form, selected_product=selected_product)\n\n# Inventory route\n@app.route('/inventory')\n@login_required\ndef inventory():\n    page = request.args.get('page', 1, type=int)\n    search = request.args.get('search', '', type=str)\n    \n    query = Product.query\n    if search:\n        query = query.filter(\n            Product.name.contains(search) | \n            Product.code.contains(search) |\n            Product.supplier_reference.contains(search)\n        )\n    \n    products = query.paginate(\n        page=page, per_page=20, error_out=False\n    )\n    \n    # Create form for CSRF token\n    form = AllocationForm()\n    \n    return render_template('inventory.html', products=products, search=search, form=form)\n\n# Allocation history route\n@app.route('/allocation_history')\n@login_required\ndef allocation_history():\n    page = request.args.get('page', 1, type=int)\n    \n    if current_user.role == 'almoxarifado':\n        allocations = Allocation.query.order_by(Allocation.allocated_at.desc()).paginate(\n            page=page, per_page=20, error_out=False\n        )\n    else:\n        allocations = Allocation.query.filter_by(user_id=current_user.id).order_by(\n            Allocation.allocated_at.desc()\n        ).paginate(\n            page=page, per_page=20, error_out=False\n        )\n    \n    return render_template('allocation_history.html', allocations=allocations)\n\n# Production user routes\n@app.route('/my_requests')\n@login_required\ndef my_requests():\n    if current_user.role != 'producao':\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('index'))\n    \n    page = request.args.get('page', 1, type=int)\n    allocations = Allocation.query.filter_by(user_id=current_user.id).order_by(\n        Allocation.allocated_at.desc()\n    ).paginate(\n        page=page, per_page=20, error_out=False\n    )\n    \n    return render_template('my_requests.html', allocations=allocations)\n\n# Approval workflow routes for warehouse staff\n@app.route('/pending_requests')\n@login_required\ndef pending_requests():\n    if current_user.role != 'almoxarifado':\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('index'))\n    \n    page = request.args.get('page', 1, type=int)\n    pending_allocations = Allocation.query.filter_by(status='pending').order_by(\n        Allocation.allocated_at.desc()\n    ).paginate(\n        page=page, per_page=20, error_out=False\n    )\n    \n    return render_template('pending_requests.html', allocations=pending_allocations)\n\n@app.route('/approve_request/<int:allocation_id>', methods=['GET', 'POST'])\n@login_required\ndef approve_request(allocation_id):\n    if current_user.role != 'almoxarifado':\n        flash('Acesso negado.', 'danger')\n        return redirect(url_for('index'))\n    \n    allocation = Allocation.query.get_or_404(allocation_id)\n    \n    if allocation.status != 'pending':\n        flash('Esta solicita√ß√£o j√° foi processada.', 'warning')\n        return redirect(url_for('pending_requests'))\n    \n    form = ApprovalForm()\n    \n    if form.validate_on_submit():\n        allocation.status = form.action.data\n        allocation.approved_by_id = current_user.id\n        allocation.approved_at = brazil_now()\n        allocation.approval_notes = form.approval_notes.data\n        \n        if form.action.data == 'approved':\n            # Check if there's enough stock\n            if allocation.product.quantity < allocation.quantity:\n                flash('Quantidade insuficiente em estoque para aprova√ß√£o.', 'danger')\n                return render_template('approve_request.html', allocation=allocation, form=form)\n            \n            # Update stock\n            log_stock_movement(\n                allocation.product, \n                current_user, \n                'allocation', \n                allocation.quantity, \n                f'Solicita√ß√£o aprovada - Obra {allocation.work_number}'\n            )\n            \n            flash(f'Solicita√ß√£o aprovada com sucesso!', 'success')\n        else:\n            flash(f'Solicita√ß√£o rejeitada.', 'info')\n        \n        db.session.commit()\n        return redirect(url_for('pending_requests'))\n    \n    return render_template('approve_request.html', allocation=allocation, form=form)\n\n# API routes for autocomplete\n@app.route('/api/products/search')\n@login_required\ndef search_products():\n    query = request.args.get('q', '')\n    if len(query) < 2:\n        return jsonify([])\n    \n    products = Product.query.filter(\n        Product.name.contains(query) | \n        Product.code.contains(query) |\n        Product.supplier_reference.contains(query)\n    ).limit(10).all()\n    \n    result = []\n    for product in products:\n        result.append({\n            'id': product.id,\n            'code': product.code,\n            'name': product.name,\n            'supplier_reference': product.supplier_reference,\n            'location': product.location,\n            'quantity': product.quantity,\n            'unit': product.unit,\n            'supplier_name': product.supplier_name,\n            'photo_filename': product.photo_filename\n        })\n    \n    return jsonify(result)\n\n# Static file serving\n@app.route('/uploads/<filename>')\ndef uploaded_file(filename):\n    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n\n# Error handlers\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('errors/404.html'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return render_template('errors/500.html'), 500\n\n# Create default admin user\nwith app.app_context():\n    admin = User.query.filter_by(username='admin').first()\n    if not admin:\n        admin = User(\n            username='admin',\n            email='admin@empresa.com',\n            role='almoxarifado',\n            is_admin=True\n        )\n        admin.set_password('admin123')\n        db.session.add(admin)\n        \n        # No need to create default supplier - using text field\n        db.session.commit()\n        \n        print(\"Admin user created: admin/admin123\")\n\n\n\n","size_bytes":25247},"src/utils.py":{"content":"import os\nimport uuid\nfrom werkzeug.utils import secure_filename\nfrom flask import current_app\nimport secrets\nfrom datetime import datetime, timedelta\nfrom flask_mail import Message\nfrom app import mail\n\ndef allowed_file(filename):\n    \"\"\"Check if the file extension is allowed\"\"\"\n    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef save_uploaded_file(file):\n    \"\"\"Save uploaded file to the uploads directory\"\"\"\n    if file and file.filename:\n        try:\n            # Check if file type is allowed\n            if not allowed_file(file.filename):\n                print(f\"Tipo de arquivo n√£o permitido: {file.filename}\")\n                return None\n\n            # Generate unique filename\n            filename = secure_filename(file.filename)\n            if not filename:\n                return None\n\n            unique_filename = f\"{uuid.uuid4().hex}_{filename}\"\n\n            # Ensure upload directory exists\n            os.makedirs(current_app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n            # Save file\n            filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], unique_filename)\n            file.save(filepath)\n\n            # Verify file was saved\n            if os.path.exists(filepath):\n                return unique_filename\n            else:\n                return None\n\n        except Exception as e:\n            print(f\"Erro ao salvar arquivo: {e}\")\n            return None\n    return None\n\ndef delete_uploaded_file(filename):\n    \"\"\"Delete uploaded file\"\"\"\n    if filename:\n        file_path = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)\n        if os.path.exists(file_path):\n            os.remove(file_path)\n\ndef generate_reset_token():\n    \"\"\"Generate a secure reset token\"\"\"\n    return secrets.token_urlsafe(32)\n\ndef send_reset_email(user, token):\n    \"\"\"Send password reset email\"\"\"\n    try:\n        msg = Message(\n            'Redefini√ß√£o de Senha - Sistema de Estoque',\n            recipients=[user.email]\n        )\n\n        reset_url = f\"{current_app.config.get('BASE_URL', 'http://localhost:5000')}/reset_password?token={token}\"\n\n        msg.body = f'''\nOl√° {user.username},\n\nVoc√™ solicitou a redefini√ß√£o de sua senha no Sistema de Controle de Estoque.\n\nPara redefinir sua senha, clique no link abaixo:\n{reset_url}\n\nEste link expirar√° em 1 hora.\n\nSe voc√™ n√£o solicitou esta redefini√ß√£o, ignore este email.\n\nAtenciosamente,\nEquipe do Sistema de Estoque\n        '''\n\n        mail.send(msg)\n        return True\n    except Exception as e:\n        current_app.logger.error(f\"Erro ao enviar email de redefini√ß√£o: {e}\")\n        return False\n\ndef format_quantity(quantity, unit):\n    \"\"\"Format quantity with unit for display\"\"\"\n    quantity_str = str(int(quantity))  # Convert to integer string\n    unit_display = {\n        'unidade': 'un',\n        'metros': 'm',\n        'pacote': 'pct',\n        'cento': 'cto'\n    }\n    return f\"{quantity_str} {unit_display.get(unit, unit)}\"\n\ndef log_stock_movement(product, user, movement_type, quantity, notes=\"\"):\n    \"\"\"Log stock movement for audit trail\"\"\"\n    from models import StockMovement\n    from app import db\n\n    previous_quantity = product.quantity\n\n    if movement_type == 'add':\n        new_quantity = previous_quantity + quantity\n    elif movement_type == 'remove':\n        new_quantity = max(0, previous_quantity - quantity)\n    elif movement_type == 'allocation':\n        new_quantity = max(0, previous_quantity - quantity)\n    else:\n        new_quantity = previous_quantity\n\n    movement = StockMovement(\n        product_id=product.id,\n        user_id=user.id,\n        movement_type=movement_type,\n        quantity=quantity,\n        previous_quantity=previous_quantity,\n        new_quantity=new_quantity,\n        notes=notes\n    )\n\n    db.session.add(movement)\n    product.quantity = new_quantity\n\n    return movement","size_bytes":3943},"src/static/css/style.css":{"content":"/* Custom styles for Sistema de Controle de Estoque */\n\n/* General improvements for dark theme */\n:root {\n    --bs-body-bg: #0d1117;\n    --bs-body-color: #c9d1d9;\n    --custom-border-color: #30363d;\n    --custom-hover-bg: #21262d;\n}\n\n/* Search results dropdown styling */\n.search-result-item {\n    transition: background-color 0.2s ease;\n    border-color: var(--custom-border-color) !important;\n    background-color: var(--bs-body-bg) !important;\n    color: var(--bs-body-color) !important;\n}\n\n.search-result-item:hover {\n    background-color: var(--custom-hover-bg) !important;\n}\n\n/* Search results container */\n#searchResults {\n    background-color: var(--bs-body-bg) !important;\n    border-color: var(--custom-border-color) !important;\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.4);\n}\n\n/* Product photo styling */\n.img-thumbnail {\n    border: 1px solid var(--custom-border-color);\n    background-color: var(--bs-body-bg);\n}\n\n/* Status badges improvements */\n.badge {\n    font-weight: 500;\n}\n\n.badge.fs-6 {\n    font-size: 0.875rem !important;\n}\n\n/* Table improvements */\n.table-hover tbody tr:hover {\n    background-color: var(--custom-hover-bg);\n}\n\n.table th {\n    border-color: var(--custom-border-color);\n    font-weight: 600;\n    font-size: 0.875rem;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.table td {\n    border-color: var(--custom-border-color);\n    vertical-align: middle;\n}\n\n/* Card improvements */\n.card {\n    border-color: var(--custom-border-color);\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.3);\n}\n\n.card-header {\n    border-color: var(--custom-border-color);\n    background-color: var(--custom-hover-bg);\n    font-weight: 600;\n}\n\n/* Form improvements */\n.form-control:focus {\n    border-color: var(--bs-primary);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n.form-control {\n    border-color: var(--custom-border-color);\n    background-color: var(--bs-body-bg);\n    color: var(--bs-body-color);\n}\n\n.form-control::placeholder {\n    color: #8b949e;\n}\n\n/* Button improvements */\n.btn-outline-primary:hover,\n.btn-outline-secondary:hover,\n.btn-outline-info:hover,\n.btn-outline-success:hover,\n.btn-outline-warning:hover,\n.btn-outline-danger:hover {\n    color: #fff;\n}\n\n/* Navigation improvements */\n.navbar-brand {\n    font-weight: 700;\n    font-size: 1.25rem;\n}\n\n.nav-link {\n    font-weight: 500;\n}\n\n.dropdown-menu {\n    border-color: var(--custom-border-color);\n    background-color: var(--bs-body-bg);\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.4);\n}\n\n.dropdown-item {\n    color: var(--bs-body-color);\n}\n\n.dropdown-item:hover {\n    background-color: var(--custom-hover-bg);\n    color: var(--bs-body-color);\n}\n\n/* Modal improvements */\n.modal-content {\n    border-color: var(--custom-border-color);\n    background-color: var(--bs-body-bg);\n}\n\n.modal-header {\n    border-color: var(--custom-border-color);\n}\n\n.modal-footer {\n    border-color: var(--custom-border-color);\n}\n\n/* Alert improvements */\n.alert {\n    border-color: var(--custom-border-color);\n}\n\n.alert-info {\n    background-color: rgba(13, 202, 240, 0.1);\n    border-color: rgba(13, 202, 240, 0.2);\n    color: #9ec5fe;\n}\n\n.alert-light {\n    background-color: rgba(248, 249, 250, 0.1);\n    border-color: rgba(248, 249, 250, 0.2);\n    color: #f8f9fa;\n}\n\n/* Pagination improvements */\n.page-link {\n    background-color: var(--bs-body-bg);\n    border-color: var(--custom-border-color);\n    color: var(--bs-body-color);\n}\n\n.page-link:hover {\n    background-color: var(--custom-hover-bg);\n    border-color: var(--custom-border-color);\n    color: var(--bs-body-color);\n}\n\n.page-item.active .page-link {\n    background-color: var(--bs-primary);\n    border-color: var(--bs-primary);\n}\n\n.page-item.disabled .page-link {\n    background-color: var(--bs-body-bg);\n    border-color: var(--custom-border-color);\n    color: #6c757d;\n}\n\n/* Breadcrumb improvements */\n.breadcrumb {\n    background-color: transparent;\n    padding: 0;\n    margin: 0;\n}\n\n.breadcrumb-item + .breadcrumb-item::before {\n    color: #6c757d;\n}\n\n.breadcrumb-item a {\n    color: var(--bs-primary);\n    text-decoration: none;\n}\n\n.breadcrumb-item a:hover {\n    text-decoration: underline;\n}\n\n.breadcrumb-item.active {\n    color: #8b949e;\n}\n\n/* Search input styling */\n#searchInput {\n    transition: all 0.3s ease;\n}\n\n#searchInput:focus {\n    transform: scale(1.02);\n}\n\n/* Toast notifications */\n.toast-container {\n    z-index: 1055;\n}\n\n/* Loading spinner */\n.spinner-border-sm {\n    width: 1rem;\n    height: 1rem;\n}\n\n/* Custom file input */\n.form-control[type=\"file\"] {\n    padding: 0.375rem 0.75rem;\n}\n\n/* Autocomplete styles for inventory page */\n.autocomplete-results {\n    border-top: none !important;\n    border-top-left-radius: 0 !important;\n    border-top-right-radius: 0 !important;\n}\n\n.autocomplete-item {\n    transition: all 0.2s ease;\n    cursor: pointer;\n}\n\n.autocomplete-item:hover {\n    background-color: var(--bs-light) !important;\n}\n\n.autocomplete-item.bg-primary {\n    background-color: var(--bs-primary) !important;\n    color: white !important;\n}\n\n.autocomplete-item.bg-primary .text-muted {\n    color: rgba(255, 255, 255, 0.8) !important;\n}\n\n.autocomplete-item.bg-primary .badge {\n    background-color: rgba(255, 255, 255, 0.2) !important;\n    color: white !important;\n}\n\n/* Fade in animation for autocomplete */\n.fade-in {\n    animation: fadeIn 0.2s ease-in;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(-10px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n/* Highlight selected product in inventory table */\ntbody tr {\n    transition: background-color 0.3s ease;\n}\n\n/* Loading states */\n.btn:disabled {\n    opacity: 0.65;\n    cursor: not-allowed;\n}\n\n/* Custom spacing */\n.container {\n    padding-left: 1rem;\n    padding-right: 1rem;\n}\n\n/* Photo viewer styles */\n.product-photo {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.product-photo:hover {\n    transform: scale(1.05);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n/* Photo modal styles */\n#photoModal .modal-body {\n    padding: 1.5rem;\n    background-color: #f8f9fa;\n}\n\n#photoModal img {\n    border-radius: 0.5rem;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n}\n\n/* Filter button styles */\n#clearFilterBtn {\n    animation: fadeIn 0.3s ease;\n}\n\n/* Filtered row animations */\ntbody tr {\n    transition: all 0.3s ease;\n}\n\n/* Search highlight effect */\n.search-highlight {\n    background-color: var(--bs-warning-bg-subtle) !important;\n    border-left: 4px solid var(--bs-warning) !important;\n}\n\n/* Responsive improvements */\n@media (max-width: 768px) {\n    .table-responsive {\n        font-size: 0.875rem;\n    }\n\n    .btn-group-sm > .btn {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.75rem;\n    }\n\n    .card-body {\n        padding: 1rem;\n    }\n\n    .modal-dialog {\n        margin: 0.5rem;\n    }\n\n    .product-photo {\n        width: 45px !important;\n        height: 45px !important;\n    }\n\n    #photoModal .modal-lg {\n        max-width: 95%;\n    }\n}\n\n/* Print styles */\n@media print {\n    .navbar,\n    .btn,\n    .pagination,\n    .modal {\n        display: none !important;\n    }\n\n    .card {\n        border: none !important;\n        box-shadow: none !important;\n    }\n\n    .table {\n        color: #000 !important;\n    }\n}\n\n/* Accessibility improvements */\n.btn:focus,\n.form-control:focus,\n.nav-link:focus {\n    outline: 2px solid var(--bs-primary);\n    outline-offset: 2px;\n}\n\n/* Animation for better UX */\n.fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Status indicators */\n.status-indicator {\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    margin-right: 0.5rem;\n}\n\n.status-indicator.active {\n    background-color: #28a745;\n}\n\n.status-indicator.inactive {\n    background-color: #dc3545;\n}\n\n/* Custom scrollbar for webkit browsers */\n::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--bs-body-bg);\n}\n\n::-webkit-scrollbar-thumb {\n    background: #6c757d;\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #8b949e;\n}\n\n/* File input styling */\n.form-control[type=\"file\"] {\n    padding: 0.375rem 0.75rem;\n}\n\n.form-control[type=\"file\"]::-webkit-file-upload-button {\n    background-color: var(--bs-secondary);\n    border: 1px solid var(--custom-border-color);\n    border-radius: 0.375rem;\n    color: #fff;\n    padding: 0.25rem 0.5rem;\n    margin-right: 0.75rem;\n    cursor: pointer;\n}\n\n.form-control[type=\"file\"]::-webkit-file-upload-button:hover {\n    background-color: #5a6268;\n}\n\n/* Text truncation utility */\n.text-truncate-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n.text-truncate-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n/* Error states */\n.is-invalid {\n    border-color: #dc3545;\n}\n\n.is-invalid:focus {\n    border-color: #dc3545;\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.invalid-feedback {\n    display: block;\n    width: 100%;\n    margin-top: 0.25rem;\n    font-size: 0.875rem;\n    color: #dc3545;\n}\n\n/* Success states */\n.is-valid {\n    border-color: #28a745;\n}\n\n.is-valid:focus {\n    border-color: #28a745;\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.valid-feedback {\n    display: block;\n    width: 100%;\n    margin-top: 0.25rem;\n    font-size: 0.875rem;\n    color: #28a745;\n}","size_bytes":9569},"src/static/js/autocomplete.js":{"content":"/**\n * Autocomplete functionality for product search\n * Sistema de Controle de Estoque\n */\n\nclass ProductAutocomplete {\n    constructor(inputElement, resultsContainer, options = {}) {\n        this.input = inputElement;\n        this.results = resultsContainer;\n        this.options = {\n            minLength: 2,\n            delay: 300,\n            maxResults: 10,\n            apiEndpoint: '/api/products/search',\n            ...options\n        };\n        \n        this.searchTimeout = null;\n        this.selectedIndex = -1;\n        this.currentResults = [];\n        \n        this.init();\n    }\n    \n    init() {\n        this.input.addEventListener('input', this.handleInput.bind(this));\n        this.input.addEventListener('keydown', this.handleKeydown.bind(this));\n        this.input.addEventListener('focus', this.handleFocus.bind(this));\n        \n        // Hide results when clicking outside\n        document.addEventListener('click', (e) => {\n            if (!this.input.contains(e.target) && !this.results.contains(e.target)) {\n                this.hideResults();\n            }\n        });\n    }\n    \n    handleInput(e) {\n        const query = e.target.value.trim();\n        \n        clearTimeout(this.searchTimeout);\n        \n        if (query.length < this.options.minLength) {\n            this.hideResults();\n            this.clearSelection();\n            return;\n        }\n        \n        this.searchTimeout = setTimeout(() => {\n            this.search(query);\n        }, this.options.delay);\n    }\n    \n    handleKeydown(e) {\n        if (!this.isVisible()) return;\n        \n        switch (e.key) {\n            case 'ArrowDown':\n                e.preventDefault();\n                this.selectNext();\n                break;\n            case 'ArrowUp':\n                e.preventDefault();\n                this.selectPrevious();\n                break;\n            case 'Enter':\n                e.preventDefault();\n                if (this.selectedIndex >= 0) {\n                    this.selectItem(this.currentResults[this.selectedIndex]);\n                }\n                break;\n            case 'Escape':\n                this.hideResults();\n                this.input.blur();\n                break;\n        }\n    }\n    \n    handleFocus(e) {\n        const query = e.target.value.trim();\n        if (query.length >= this.options.minLength && this.currentResults.length > 0) {\n            this.showResults();\n        }\n    }\n    \n    async search(query) {\n        try {\n            const response = await fetch(`${this.options.apiEndpoint}?q=${encodeURIComponent(query)}`);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const products = await response.json();\n            this.currentResults = products.slice(0, this.options.maxResults);\n            this.displayResults(this.currentResults);\n        } catch (error) {\n            console.error('Search error:', error);\n            this.displayError('Erro ao buscar produtos. Tente novamente.');\n        }\n    }\n    \n    displayResults(products) {\n        if (products.length === 0) {\n            this.displayEmpty();\n            return;\n        }\n        \n        const resultsHtml = products.map((product, index) => this.createResultItem(product, index)).join('');\n        this.results.innerHTML = resultsHtml;\n        this.selectedIndex = -1;\n        this.showResults();\n        \n        // Add click handlers\n        this.results.querySelectorAll('.autocomplete-item').forEach((item, index) => {\n            item.addEventListener('click', () => {\n                this.selectItem(products[index]);\n            });\n        });\n    }\n    \n    createResultItem(product, index) {\n        const stockClass = product.quantity > 0 ? 'success' : 'danger';\n        const stockText = product.quantity > 0 ? `${product.quantity} ${product.unit}` : 'Sem estoque';\n        \n        return `\n            <div class=\"autocomplete-item p-3 border-bottom\" data-index=\"${index}\" style=\"cursor: pointer;\">\n                <div class=\"d-flex justify-content-between align-items-start\">\n                    <div class=\"flex-grow-1\">\n                        <div class=\"fw-bold text-primary\">${this.escapeHtml(product.code)}</div>\n                        <div class=\"text-truncate\">${this.escapeHtml(product.name)}</div>\n                        <small class=\"text-muted\">\n                            ${product.supplier_reference ? this.escapeHtml(product.supplier_reference) + ' - ' : ''}\n                            ${this.escapeHtml(product.supplier_name)}\n                            <br>\n                            <i class=\"fas fa-map-marker-alt\"></i> ${this.escapeHtml(product.location)}\n                        </small>\n                    </div>\n                    <div class=\"text-end ms-2\">\n                        <span class=\"badge bg-${stockClass}\">${stockText}</span>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    \n    displayEmpty() {\n        this.results.innerHTML = `\n            <div class=\"p-3 text-muted text-center\">\n                <i class=\"fas fa-search\"></i> Nenhum produto encontrado\n            </div>\n        `;\n        this.showResults();\n    }\n    \n    displayError(message) {\n        this.results.innerHTML = `\n            <div class=\"p-3 text-danger text-center\">\n                <i class=\"fas fa-exclamation-triangle\"></i> ${this.escapeHtml(message)}\n            </div>\n        `;\n        this.showResults();\n    }\n    \n    selectNext() {\n        if (this.selectedIndex < this.currentResults.length - 1) {\n            this.selectedIndex++;\n            this.updateSelection();\n        }\n    }\n    \n    selectPrevious() {\n        if (this.selectedIndex > 0) {\n            this.selectedIndex--;\n            this.updateSelection();\n        }\n    }\n    \n    updateSelection() {\n        // Remove previous selection\n        this.results.querySelectorAll('.autocomplete-item').forEach(item => {\n            item.classList.remove('bg-primary', 'text-white');\n        });\n        \n        // Add current selection\n        if (this.selectedIndex >= 0) {\n            const selectedItem = this.results.querySelector(`[data-index=\"${this.selectedIndex}\"]`);\n            if (selectedItem) {\n                selectedItem.classList.add('bg-primary', 'text-white');\n                selectedItem.scrollIntoView({ block: 'nearest' });\n            }\n        }\n    }\n    \n    selectItem(product) {\n        this.hideResults();\n        \n        // Trigger custom event with selected product\n        const event = new CustomEvent('productSelected', {\n            detail: { product }\n        });\n        this.input.dispatchEvent(event);\n    }\n    \n    clearSelection() {\n        this.selectedIndex = -1;\n        this.currentResults = [];\n        \n        // Trigger custom event for clearing selection\n        const event = new CustomEvent('productCleared');\n        this.input.dispatchEvent(event);\n    }\n    \n    showResults() {\n        this.results.style.display = 'block';\n        this.results.classList.add('fade-in');\n    }\n    \n    hideResults() {\n        this.results.style.display = 'none';\n        this.results.classList.remove('fade-in');\n    }\n    \n    isVisible() {\n        return this.results.style.display === 'block';\n    }\n    \n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n    \n    // Public methods\n    clear() {\n        this.input.value = '';\n        this.hideResults();\n        this.clearSelection();\n    }\n    \n    setValue(value) {\n        this.input.value = value;\n    }\n    \n    focus() {\n        this.input.focus();\n    }\n    \n    destroy() {\n        clearTimeout(this.searchTimeout);\n        this.hideResults();\n    }\n}\n\n// Global utility functions for common autocomplete scenarios\nwindow.ProductAutocomplete = ProductAutocomplete;\n\n// Initialize autocomplete for product search inputs when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    const productSearchInputs = document.querySelectorAll('[data-autocomplete=\"products\"]');\n    \n    productSearchInputs.forEach(input => {\n        const resultsContainer = input.nextElementSibling;\n        if (resultsContainer && resultsContainer.classList.contains('autocomplete-results')) {\n            new ProductAutocomplete(input, resultsContainer);\n        }\n    });\n});\n\n// Utility function to format currency\nfunction formatCurrency(value) {\n    return new Intl.NumberFormat('pt-BR', {\n        style: 'currency',\n        currency: 'BRL'\n    }).format(value);\n}\n\n// Utility function to format numbers\nfunction formatNumber(value, decimals = 2) {\n    return new Intl.NumberFormat('pt-BR', {\n        minimumFractionDigits: decimals,\n        maximumFractionDigits: decimals\n    }).format(value);\n}\n\n// Utility function to debounce function calls\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Utility function to show loading state\nfunction showLoading(element, text = 'Carregando...') {\n    const originalContent = element.innerHTML;\n    element.innerHTML = `\n        <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\n        ${text}\n    `;\n    element.disabled = true;\n    \n    return () => {\n        element.innerHTML = originalContent;\n        element.disabled = false;\n    };\n}\n\n// Utility function to show toast notifications\nfunction showToast(message, type = 'info') {\n    const toastContainer = document.getElementById('toast-container');\n    if (!toastContainer) {\n        const container = document.createElement('div');\n        container.id = 'toast-container';\n        container.className = 'toast-container position-fixed top-0 end-0 p-3';\n        container.style.zIndex = '1055';\n        document.body.appendChild(container);\n    }\n    \n    const toastId = `toast-${Date.now()}`;\n    const toastHtml = `\n        <div id=\"${toastId}\" class=\"toast align-items-center text-bg-${type} border-0\" role=\"alert\">\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">\n                    ${message}\n                </div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        </div>\n    `;\n    \n    document.getElementById('toast-container').insertAdjacentHTML('beforeend', toastHtml);\n    \n    const toastElement = document.getElementById(toastId);\n    const toast = new bootstrap.Toast(toastElement, { delay: 5000 });\n    toast.show();\n    \n    toastElement.addEventListener('hidden.bs.toast', () => {\n        toastElement.remove();\n    });\n}\n\n// Form validation utilities\nfunction validateForm(form) {\n    const requiredFields = form.querySelectorAll('[required]');\n    let isValid = true;\n    \n    requiredFields.forEach(field => {\n        if (!field.value.trim()) {\n            field.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            field.classList.remove('is-invalid');\n            field.classList.add('is-valid');\n        }\n    });\n    \n    return isValid;\n}\n\n// Add real-time validation to forms\ndocument.addEventListener('DOMContentLoaded', function() {\n    const forms = document.querySelectorAll('form[data-validate=\"true\"]');\n    \n    forms.forEach(form => {\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const requiredFields = form.querySelectorAll('[required]');\n        \n        function updateSubmitButton() {\n            const isValid = validateForm(form);\n            if (submitBtn) {\n                submitBtn.disabled = !isValid;\n            }\n        }\n        \n        requiredFields.forEach(field => {\n            field.addEventListener('input', updateSubmitButton);\n            field.addEventListener('blur', updateSubmitButton);\n        });\n        \n        // Initial validation\n        updateSubmitButton();\n    });\n});\n\n// Confirmation dialogs\nfunction confirmAction(message, callback) {\n    if (confirm(message)) {\n        callback();\n    }\n}\n\n// Enhanced confirmation for delete actions\nfunction confirmDelete(itemName, callback) {\n    const message = `Tem certeza que deseja excluir \"${itemName}\"?\\n\\nEsta a√ß√£o n√£o pode ser desfeita.`;\n    confirmAction(message, callback);\n}\n","size_bytes":12559},"replit.md":{"content":"# Inventory Management System\n\n## Project Overview\nThis is a Flask-based inventory management system imported from GitHub. The application provides a comprehensive solution for managing products, stock allocations, and user roles in a warehouse/production environment.\n\n## Key Features\n- **User Authentication**: Login system with role-based access (warehouse/production staff)\n- **Inventory Management**: Add, edit, and track products with photos\n- **Stock Control**: Stock adjustments, allocations, and movement tracking\n- **Approval Workflow**: Production staff can request products, warehouse staff can approve\n- **Multi-language Support**: Portuguese interface\n- **File Uploads**: Product photo management\n\n## Architecture\n- **Backend**: Flask with SQLAlchemy ORM\n- **Database**: SQLite for development, PostgreSQL support for production\n- **Frontend**: HTML templates with Bootstrap CSS, jQuery for autocomplete\n- **Authentication**: Flask-Login with role-based permissions\n- **File Handling**: Secure file uploads for product images\n\n## User Roles\n- **Almoxarifado (Warehouse)**: Full access to inventory, can approve requests, manage users\n- **Produ√ß√£o (Production)**: Can request products, view inventory (limited)\n\n## Setup Status\n‚úÖ Dependencies installed (Flask, SQLAlchemy, etc.)\n‚úÖ Database configured (SQLite for development)\n‚úÖ Application running on port 5000\n‚úÖ Workflow configured for development\n‚úÖ Deployment configuration set for production (Gunicorn)\n\n## Default Credentials\n- **Username**: admin\n- **Password**: admin123\n- **Role**: Warehouse Administrator\n\n## Current Configuration\n- **Development**: Uses SQLite database with debug mode\n- **Production**: Configured to use Gunicorn with autoscale deployment\n- **Port**: 5000 (required for Replit environment)\n- **Host**: 0.0.0.0 (allows external access through Replit proxy)\n\n## Recent Changes\n- Fixed Python dependencies installation\n- Resolved type safety issue in stock movement logging\n- Configured proper hosting settings for Replit environment\n- Set up workflow for development server\n- Configured deployment settings for production\n\n## User Preferences\n- Interface in Portuguese (Brazilian)\n- Bootstrap-based responsive design\n- Role-based dashboard navigation\n- Image upload support for products\n\n## Project Structure\n```\nsrc/\n‚îú‚îÄ‚îÄ app.py              # Flask application factory\n‚îú‚îÄ‚îÄ main.py             # Application entry point\n‚îú‚îÄ‚îÄ models.py           # Database models\n‚îú‚îÄ‚îÄ routes.py           # Application routes\n‚îú‚îÄ‚îÄ forms.py            # WTForms definitions\n‚îú‚îÄ‚îÄ utils.py            # Utility functions\n‚îú‚îÄ‚îÄ static/             # CSS, JS, uploads\n‚îî‚îÄ‚îÄ templates/          # HTML templates\n```","size_bytes":2732}},"version":1}